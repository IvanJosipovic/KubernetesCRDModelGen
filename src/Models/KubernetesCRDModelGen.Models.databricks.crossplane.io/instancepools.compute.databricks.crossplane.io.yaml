apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: instancepools.compute.databricks.crossplane.io
spec:
  group: compute.databricks.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - databricks
    kind: InstancePool
    listKind: InstancePoolList
    plural: instancepools
    singular: instancepool
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: InstancePool is the Schema for the InstancePools API.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: InstancePoolSpec defines the desired state of InstancePool
            properties:
              deletionPolicy:
                default: Delete
                description: |-
                  DeletionPolicy specifies what will happen to the underlying external
                  when this managed resource is deleted - either "Delete" or "Orphan" the
                  external resource.
                  This field is planned to be deprecated in favor of the ManagementPolicies
                  field in a future release. Currently, both could be set independently and
                  non-default values would be honored if the feature flag is enabled.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  awsAttributes:
                    items:
                      properties:
                        availability:
                          description: Availability type used for all nodes. Valid values are SPOT_AZURE and ON_DEMAND_AZURE.
                          type: string
                        spotBidPricePercent:
                          description: (Integer) The max price for AWS spot instances, as a percentage of the corresponding instance type's on-demand price. For example, if this field is set to 50, and the instance pool needs a new i3.xlarge spot instance, then the max price is half of the price of on-demand i3.xlarge instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand i3.xlarge instances. If not specified, the default value is 100. When spot instances are requested for this instance pool, only spot instances whose max price percentage matches this field are considered. For safety, this field cannot be greater than 10000.
                          type: number
                        zoneId:
                          description: (String) Identifier for the availability zone/datacenter in which the instance pool resides. This string is of the form like "us-west-2a". The provided availability zone must be in the same region as the Databricks deployment. For example, "us-west-2a" is not a valid zone ID if the Databricks deployment resides in the "us-east-1" region. If not specified, a default zone is used. You can find the list of available zones as well as the default value by using the List Zones API.
                          type: string
                      type: object
                    type: array
                  azureAttributes:
                    items:
                      properties:
                        availability:
                          description: Availability type used for all nodes. Valid values are SPOT_AZURE and ON_DEMAND_AZURE.
                          type: string
                        spotBidMaxPrice:
                          description: The max bid price used for Azure spot instances. You can set this to greater than or equal to the current spot price. You can also set this to -1, which specifies that the instance cannot be evicted on the basis of price. The price for the instance will be the current price for spot instances or the price for a standard instance.
                          type: number
                      type: object
                    type: array
                  customTags:
                    additionalProperties:
                      type: string
                    description: (Map) Additional tags for instance pool resources. Databricks tags all pool resources (e.g. AWS & Azure instances and Disk volumes). The tags of the instance pool will propagate to the clusters using the pool (see the official documentation). Attempting to set the same tags in both cluster and instance pool will raise an error. Databricks allows at most 43 custom tags.
                    type: object
                    x-kubernetes-map-type: granular
                  diskSpec:
                    items:
                      properties:
                        diskCount:
                          description: (Integer) The number of disks to attach to each instance. This feature is only enabled for supported node types. Users can choose up to the limit of the disks supported by the node type. For node types with no local disk, at least one disk needs to be specified.
                          type: number
                        diskSize:
                          description: (Integer) The size of each disk (in GiB) to attach.
                          type: number
                        diskType:
                          items:
                            properties:
                              azureDiskVolumeType:
                                type: string
                              ebsVolumeType:
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  enableElasticDisk:
                    description: '(Bool) Autoscaling Local Storage: when enabled, the instances in the pool dynamically acquire additional disk space when they are running low on disk space.'
                    type: boolean
                  gcpAttributes:
                    items:
                      properties:
                        gcpAvailability:
                          description: 'Availability type used for all nodes. Valid values are PREEMPTIBLE_GCP, PREEMPTIBLE_WITH_FALLBACK_GCP and ON_DEMAND_GCP, default: ON_DEMAND_GCP.'
                          type: string
                        localSsdCount:
                          description: Number of local SSD disks (each is 375GB in size) that will be attached to each node of the cluster.
                          type: number
                        zoneId:
                          description: Identifier for the availability zone/datacenter in which the cluster resides. This string will be of a form like us-central1-a. The provided availability zone must be in the same region as the Databricks workspace.
                          type: string
                      type: object
                    type: array
                  idleInstanceAutoterminationMinutes:
                    description: (Integer) The number of minutes that idle instances in excess of the min_idle_instances are maintained by the pool before being terminated. If not specified, excess idle instances are terminated automatically after a default timeout period. If specified, the time must be between 0 and 10000 minutes. If you specify 0, excess idle instances are removed as soon as possible.
                    type: number
                  instancePoolFleetAttributes:
                    items:
                      properties:
                        fleetOnDemandOption:
                          items:
                            properties:
                              allocationStrategy:
                                type: string
                              instancePoolsToUseCount:
                                type: number
                            type: object
                          type: array
                        fleetSpotOption:
                          items:
                            properties:
                              allocationStrategy:
                                type: string
                              instancePoolsToUseCount:
                                type: number
                            type: object
                          type: array
                        launchTemplateOverride:
                          items:
                            properties:
                              availabilityZone:
                                type: string
                              instanceType:
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  instancePoolId:
                    description: Canonical unique identifier for the instance pool.
                    type: string
                  instancePoolName:
                    description: (String) The name of the instance pool. This is required for create and edit operations. It must be unique, non-empty, and less than 100 characters.
                    type: string
                  maxCapacity:
                    description: (Integer) The maximum number of instances the pool can contain, including both idle instances and ones in use by clusters. Once the maximum capacity is reached, you cannot create new clusters from the pool and existing clusters cannot autoscale up until some instances are made idle in the pool via cluster termination or down-scaling. There is no default limit, but as a best practice, this should be set based on anticipated usage.
                    type: number
                  minIdleInstances:
                    description: (Integer) The minimum number of idle instances maintained by the pool. This is in addition to any instances in use by active clusters.
                    type: number
                  nodeTypeId:
                    description: (String) The node type for the instances in the pool. All clusters attached to the pool inherit this node type and the pool's idle instances are allocated based on this type. You can retrieve a list of available node types by using the List Node Types API call.
                    type: string
                  preloadedDockerImage:
                    items:
                      properties:
                        basicAuth:
                          description: basic_auth.username and basic_auth.password for Docker repository. Docker registry credentials are encrypted when they are stored in Databricks internal storage and when they are passed to a registry upon fetching Docker images at cluster launch. However, other authenticated and authorized API users of this workspace can access the username and password.
                          items:
                            properties:
                              passwordSecretRef:
                                description: A SecretKeySelector is a reference to a secret key in an arbitrary namespace.
                                properties:
                                  key:
                                    description: The key to select.
                                    type: string
                                  name:
                                    description: Name of the secret.
                                    type: string
                                  namespace:
                                    description: Namespace of the secret.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                              username:
                                type: string
                            type: object
                          type: array
                        url:
                          description: URL for the Docker image
                          type: string
                      type: object
                    type: array
                  preloadedSparkVersions:
                    description: (List) A list with at most one runtime version the pool installs on each instance. Pool clusters that use a preloaded runtime version start faster as they do not have to wait for the image to download. You can retrieve them via databricks_spark_version data source or via  Runtime Versions API call.
                    items:
                      type: string
                    type: array
                type: object
              initProvider:
                description: |-
                  THIS IS A BETA FIELD. It will be honored
                  unless the Management Policies feature flag is disabled.
                  InitProvider holds the same fields as ForProvider, with the exception
                  of Identifier and other resource reference fields. The fields that are
                  in InitProvider are merged into ForProvider when the resource is created.
                  The same fields are also added to the terraform ignore_changes hook, to
                  avoid updating them after creation. This is useful for fields that are
                  required on creation, but we do not desire to update them after creation,
                  for example because of an external controller is managing them, like an
                  autoscaler.
                properties:
                  awsAttributes:
                    items:
                      properties:
                        availability:
                          description: Availability type used for all nodes. Valid values are SPOT_AZURE and ON_DEMAND_AZURE.
                          type: string
                        spotBidPricePercent:
                          description: (Integer) The max price for AWS spot instances, as a percentage of the corresponding instance type's on-demand price. For example, if this field is set to 50, and the instance pool needs a new i3.xlarge spot instance, then the max price is half of the price of on-demand i3.xlarge instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand i3.xlarge instances. If not specified, the default value is 100. When spot instances are requested for this instance pool, only spot instances whose max price percentage matches this field are considered. For safety, this field cannot be greater than 10000.
                          type: number
                        zoneId:
                          description: (String) Identifier for the availability zone/datacenter in which the instance pool resides. This string is of the form like "us-west-2a". The provided availability zone must be in the same region as the Databricks deployment. For example, "us-west-2a" is not a valid zone ID if the Databricks deployment resides in the "us-east-1" region. If not specified, a default zone is used. You can find the list of available zones as well as the default value by using the List Zones API.
                          type: string
                      type: object
                    type: array
                  azureAttributes:
                    items:
                      properties:
                        availability:
                          description: Availability type used for all nodes. Valid values are SPOT_AZURE and ON_DEMAND_AZURE.
                          type: string
                        spotBidMaxPrice:
                          description: The max bid price used for Azure spot instances. You can set this to greater than or equal to the current spot price. You can also set this to -1, which specifies that the instance cannot be evicted on the basis of price. The price for the instance will be the current price for spot instances or the price for a standard instance.
                          type: number
                      type: object
                    type: array
                  customTags:
                    additionalProperties:
                      type: string
                    description: (Map) Additional tags for instance pool resources. Databricks tags all pool resources (e.g. AWS & Azure instances and Disk volumes). The tags of the instance pool will propagate to the clusters using the pool (see the official documentation). Attempting to set the same tags in both cluster and instance pool will raise an error. Databricks allows at most 43 custom tags.
                    type: object
                    x-kubernetes-map-type: granular
                  diskSpec:
                    items:
                      properties:
                        diskCount:
                          description: (Integer) The number of disks to attach to each instance. This feature is only enabled for supported node types. Users can choose up to the limit of the disks supported by the node type. For node types with no local disk, at least one disk needs to be specified.
                          type: number
                        diskSize:
                          description: (Integer) The size of each disk (in GiB) to attach.
                          type: number
                        diskType:
                          items:
                            properties:
                              azureDiskVolumeType:
                                type: string
                              ebsVolumeType:
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  enableElasticDisk:
                    description: '(Bool) Autoscaling Local Storage: when enabled, the instances in the pool dynamically acquire additional disk space when they are running low on disk space.'
                    type: boolean
                  gcpAttributes:
                    items:
                      properties:
                        gcpAvailability:
                          description: 'Availability type used for all nodes. Valid values are PREEMPTIBLE_GCP, PREEMPTIBLE_WITH_FALLBACK_GCP and ON_DEMAND_GCP, default: ON_DEMAND_GCP.'
                          type: string
                        localSsdCount:
                          description: Number of local SSD disks (each is 375GB in size) that will be attached to each node of the cluster.
                          type: number
                        zoneId:
                          description: Identifier for the availability zone/datacenter in which the cluster resides. This string will be of a form like us-central1-a. The provided availability zone must be in the same region as the Databricks workspace.
                          type: string
                      type: object
                    type: array
                  idleInstanceAutoterminationMinutes:
                    description: (Integer) The number of minutes that idle instances in excess of the min_idle_instances are maintained by the pool before being terminated. If not specified, excess idle instances are terminated automatically after a default timeout period. If specified, the time must be between 0 and 10000 minutes. If you specify 0, excess idle instances are removed as soon as possible.
                    type: number
                  instancePoolFleetAttributes:
                    items:
                      properties:
                        fleetOnDemandOption:
                          items:
                            properties:
                              allocationStrategy:
                                type: string
                              instancePoolsToUseCount:
                                type: number
                            type: object
                          type: array
                        fleetSpotOption:
                          items:
                            properties:
                              allocationStrategy:
                                type: string
                              instancePoolsToUseCount:
                                type: number
                            type: object
                          type: array
                        launchTemplateOverride:
                          items:
                            properties:
                              availabilityZone:
                                type: string
                              instanceType:
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  instancePoolId:
                    description: Canonical unique identifier for the instance pool.
                    type: string
                  instancePoolName:
                    description: (String) The name of the instance pool. This is required for create and edit operations. It must be unique, non-empty, and less than 100 characters.
                    type: string
                  maxCapacity:
                    description: (Integer) The maximum number of instances the pool can contain, including both idle instances and ones in use by clusters. Once the maximum capacity is reached, you cannot create new clusters from the pool and existing clusters cannot autoscale up until some instances are made idle in the pool via cluster termination or down-scaling. There is no default limit, but as a best practice, this should be set based on anticipated usage.
                    type: number
                  minIdleInstances:
                    description: (Integer) The minimum number of idle instances maintained by the pool. This is in addition to any instances in use by active clusters.
                    type: number
                  nodeTypeId:
                    description: (String) The node type for the instances in the pool. All clusters attached to the pool inherit this node type and the pool's idle instances are allocated based on this type. You can retrieve a list of available node types by using the List Node Types API call.
                    type: string
                  preloadedDockerImage:
                    items:
                      properties:
                        basicAuth:
                          description: basic_auth.username and basic_auth.password for Docker repository. Docker registry credentials are encrypted when they are stored in Databricks internal storage and when they are passed to a registry upon fetching Docker images at cluster launch. However, other authenticated and authorized API users of this workspace can access the username and password.
                          items:
                            properties:
                              passwordSecretRef:
                                description: A SecretKeySelector is a reference to a secret key in an arbitrary namespace.
                                properties:
                                  key:
                                    description: The key to select.
                                    type: string
                                  name:
                                    description: Name of the secret.
                                    type: string
                                  namespace:
                                    description: Namespace of the secret.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                              username:
                                type: string
                            required:
                            - passwordSecretRef
                            type: object
                          type: array
                        url:
                          description: URL for the Docker image
                          type: string
                      type: object
                    type: array
                  preloadedSparkVersions:
                    description: (List) A list with at most one runtime version the pool installs on each instance. Pool clusters that use a preloaded runtime version start faster as they do not have to wait for the image to download. You can retrieve them via databricks_spark_version data source or via  Runtime Versions API call.
                    items:
                      type: string
                    type: array
                type: object
              managementPolicies:
                default:
                - '*'
                description: |-
                  THIS IS A BETA FIELD. It is on by default but can be opted out
                  through a Crossplane feature flag.
                  ManagementPolicies specify the array of actions Crossplane is allowed to
                  take on the managed and external resources.
                  This field is planned to replace the DeletionPolicy field in a future
                  release. Currently, both could be set independently and non-default
                  values would be honored if the feature flag is enabled. If both are
                  custom, the DeletionPolicy field will be ignored.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                  and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
                items:
                  description: |-
                    A ManagementAction represents an action that the Crossplane controllers
                    can take on an external resource.
                  enum:
                  - Observe
                  - Create
                  - Update
                  - Delete
                  - LateInitialize
                  - '*'
                  type: string
                type: array
              providerConfigRef:
                default:
                  name: default
                description: |-
                  ProviderConfigReference specifies how the provider that will be used to
                  create, observe, update, and delete this managed resource should be
                  configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: |-
                          Resolution specifies whether resolution of this reference is required.
                          The default is 'Required', which means the reconcile will fail if the
                          reference cannot be resolved. 'Optional' means this reference will be
                          a no-op if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: |-
                          Resolve specifies when this reference should be resolved. The default
                          is 'IfNotPresent', which will attempt to resolve the reference only when
                          the corresponding field is not present. Use 'Always' to resolve the
                          reference on every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: |-
                  PublishConnectionDetailsTo specifies the connection secret config which
                  contains a name, metadata and a reference to secret store config to
                  which any connection details for this managed resource should be written.
                  Connection details frequently include the endpoint, username,
                  and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: |-
                      SecretStoreConfigRef specifies which secret store config should be used
                      for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: |-
                              Resolution specifies whether resolution of this reference is required.
                              The default is 'Required', which means the reconcile will fail if the
                              reference cannot be resolved. 'Optional' means this reference will be
                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: |-
                              Resolve specifies when this reference should be resolved. The default
                              is 'IfNotPresent', which will attempt to resolve the reference only when
                              the corresponding field is not present. Use 'Always' to resolve the
                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: |-
                          Annotations are the annotations to be added to connection secret.
                          - For Kubernetes secrets, this will be used as "metadata.annotations".
                          - It is up to Secret Store implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: |-
                          Labels are the labels/tags to be added to connection secret.
                          - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store types.
                        type: object
                      type:
                        description: |-
                          Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: |-
                  WriteConnectionSecretToReference specifies the namespace and name of a
                  Secret to which any connection details for this managed resource should
                  be written. Connection details frequently include the endpoint, username,
                  and password required to connect to the managed resource.
                  This field is planned to be replaced in a future release in favor of
                  PublishConnectionDetailsTo. Currently, both could be set independently
                  and connection details would be published to both without affecting
                  each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
            x-kubernetes-validations:
            - message: spec.forProvider.idleInstanceAutoterminationMinutes is a required parameter
              rule: "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.idleInstanceAutoterminationMinutes) || (has(self.initProvider) && has(self.initProvider.idleInstanceAutoterminationMinutes))"
            - message: spec.forProvider.instancePoolName is a required parameter
              rule: "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instancePoolName) || (has(self.initProvider) && has(self.initProvider.instancePoolName))"
          status:
            description: InstancePoolStatus defines the observed state of InstancePool.
            properties:
              atProvider:
                properties:
                  awsAttributes:
                    items:
                      properties:
                        availability:
                          description: Availability type used for all nodes. Valid values are SPOT_AZURE and ON_DEMAND_AZURE.
                          type: string
                        spotBidPricePercent:
                          description: (Integer) The max price for AWS spot instances, as a percentage of the corresponding instance type's on-demand price. For example, if this field is set to 50, and the instance pool needs a new i3.xlarge spot instance, then the max price is half of the price of on-demand i3.xlarge instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand i3.xlarge instances. If not specified, the default value is 100. When spot instances are requested for this instance pool, only spot instances whose max price percentage matches this field are considered. For safety, this field cannot be greater than 10000.
                          type: number
                        zoneId:
                          description: (String) Identifier for the availability zone/datacenter in which the instance pool resides. This string is of the form like "us-west-2a". The provided availability zone must be in the same region as the Databricks deployment. For example, "us-west-2a" is not a valid zone ID if the Databricks deployment resides in the "us-east-1" region. If not specified, a default zone is used. You can find the list of available zones as well as the default value by using the List Zones API.
                          type: string
                      type: object
                    type: array
                  azureAttributes:
                    items:
                      properties:
                        availability:
                          description: Availability type used for all nodes. Valid values are SPOT_AZURE and ON_DEMAND_AZURE.
                          type: string
                        spotBidMaxPrice:
                          description: The max bid price used for Azure spot instances. You can set this to greater than or equal to the current spot price. You can also set this to -1, which specifies that the instance cannot be evicted on the basis of price. The price for the instance will be the current price for spot instances or the price for a standard instance.
                          type: number
                      type: object
                    type: array
                  customTags:
                    additionalProperties:
                      type: string
                    description: (Map) Additional tags for instance pool resources. Databricks tags all pool resources (e.g. AWS & Azure instances and Disk volumes). The tags of the instance pool will propagate to the clusters using the pool (see the official documentation). Attempting to set the same tags in both cluster and instance pool will raise an error. Databricks allows at most 43 custom tags.
                    type: object
                    x-kubernetes-map-type: granular
                  diskSpec:
                    items:
                      properties:
                        diskCount:
                          description: (Integer) The number of disks to attach to each instance. This feature is only enabled for supported node types. Users can choose up to the limit of the disks supported by the node type. For node types with no local disk, at least one disk needs to be specified.
                          type: number
                        diskSize:
                          description: (Integer) The size of each disk (in GiB) to attach.
                          type: number
                        diskType:
                          items:
                            properties:
                              azureDiskVolumeType:
                                type: string
                              ebsVolumeType:
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  enableElasticDisk:
                    description: '(Bool) Autoscaling Local Storage: when enabled, the instances in the pool dynamically acquire additional disk space when they are running low on disk space.'
                    type: boolean
                  gcpAttributes:
                    items:
                      properties:
                        gcpAvailability:
                          description: 'Availability type used for all nodes. Valid values are PREEMPTIBLE_GCP, PREEMPTIBLE_WITH_FALLBACK_GCP and ON_DEMAND_GCP, default: ON_DEMAND_GCP.'
                          type: string
                        localSsdCount:
                          description: Number of local SSD disks (each is 375GB in size) that will be attached to each node of the cluster.
                          type: number
                        zoneId:
                          description: Identifier for the availability zone/datacenter in which the cluster resides. This string will be of a form like us-central1-a. The provided availability zone must be in the same region as the Databricks workspace.
                          type: string
                      type: object
                    type: array
                  id:
                    description: Canonical unique identifier for the instance pool.
                    type: string
                  idleInstanceAutoterminationMinutes:
                    description: (Integer) The number of minutes that idle instances in excess of the min_idle_instances are maintained by the pool before being terminated. If not specified, excess idle instances are terminated automatically after a default timeout period. If specified, the time must be between 0 and 10000 minutes. If you specify 0, excess idle instances are removed as soon as possible.
                    type: number
                  instancePoolFleetAttributes:
                    items:
                      properties:
                        fleetOnDemandOption:
                          items:
                            properties:
                              allocationStrategy:
                                type: string
                              instancePoolsToUseCount:
                                type: number
                            type: object
                          type: array
                        fleetSpotOption:
                          items:
                            properties:
                              allocationStrategy:
                                type: string
                              instancePoolsToUseCount:
                                type: number
                            type: object
                          type: array
                        launchTemplateOverride:
                          items:
                            properties:
                              availabilityZone:
                                type: string
                              instanceType:
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  instancePoolId:
                    description: Canonical unique identifier for the instance pool.
                    type: string
                  instancePoolName:
                    description: (String) The name of the instance pool. This is required for create and edit operations. It must be unique, non-empty, and less than 100 characters.
                    type: string
                  maxCapacity:
                    description: (Integer) The maximum number of instances the pool can contain, including both idle instances and ones in use by clusters. Once the maximum capacity is reached, you cannot create new clusters from the pool and existing clusters cannot autoscale up until some instances are made idle in the pool via cluster termination or down-scaling. There is no default limit, but as a best practice, this should be set based on anticipated usage.
                    type: number
                  minIdleInstances:
                    description: (Integer) The minimum number of idle instances maintained by the pool. This is in addition to any instances in use by active clusters.
                    type: number
                  nodeTypeId:
                    description: (String) The node type for the instances in the pool. All clusters attached to the pool inherit this node type and the pool's idle instances are allocated based on this type. You can retrieve a list of available node types by using the List Node Types API call.
                    type: string
                  preloadedDockerImage:
                    items:
                      properties:
                        basicAuth:
                          description: basic_auth.username and basic_auth.password for Docker repository. Docker registry credentials are encrypted when they are stored in Databricks internal storage and when they are passed to a registry upon fetching Docker images at cluster launch. However, other authenticated and authorized API users of this workspace can access the username and password.
                          items:
                            properties:
                              username:
                                type: string
                            type: object
                          type: array
                        url:
                          description: URL for the Docker image
                          type: string
                      type: object
                    type: array
                  preloadedSparkVersions:
                    description: (List) A list with at most one runtime version the pool installs on each instance. Pool clusters that use a preloaded runtime version start faster as they do not have to wait for the image to download. You can retrieve them via databricks_spark_version data source or via  Runtime Versions API call.
                    items:
                      type: string
                    type: array
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        LastTransitionTime is the last time this condition transitioned from one
                        status to another.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        A Message containing details about this condition's last transition from
                        one status to another, if any.
                      type: string
                    observedGeneration:
                      description: |-
                        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: A Reason for this condition's last transition from one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True, False, or Unknown?
                      type: string
                    type:
                      description: |-
                        Type of this condition. At most one of each condition type may apply to
                        a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              observedGeneration:
                description: |-
                  ObservedGeneration is the latest metadata.generation
                  which resulted in either a ready state, or stalled due to error
                  it can not recover from without human intervention.
                format: int64
                type: integer
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}