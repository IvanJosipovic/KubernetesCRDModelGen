apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: clusters.compute.databricks.crossplane.io
spec:
  group: compute.databricks.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - databricks
    kind: Cluster
    listKind: ClusterList
    plural: clusters
    singular: cluster
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Cluster is the Schema for the Clusters API.
        properties:
          apiVersion:
            description: >-
              APIVersion defines the versioned schema of this representation of an object.

              Servers should convert recognized schemas to the latest internal value, and

              may reject unrecognized values.

              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: >-
              Kind is a string value representing the REST resource this object represents.

              Servers may infer this from the endpoint the client submits requests to.

              Cannot be updated.

              In CamelCase.

              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: ClusterSpec defines the desired state of Cluster
            properties:
              deletionPolicy:
                default: Delete
                description: >-
                  DeletionPolicy specifies what will happen to the underlying external

                  when this managed resource is deleted - either "Delete" or "Orphan" the

                  external resource.

                  This field is planned to be deprecated in favor of the ManagementPolicies

                  field in a future release. Currently, both could be set independently and

                  non-default values would be honored if the feature flag is enabled.

                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  applyPolicyDefaultValues:
                    description: Whether to use policy default values for missing cluster attributes.
                    type: boolean
                  autoscale:
                    items:
                      properties:
                        maxWorkers:
                          description: The maximum number of workers to which the cluster can scale up when overloaded. max_workers must be strictly greater than min_workers.
                          type: number
                        minWorkers:
                          description: The minimum number of workers to which the cluster can scale down when underutilized. It is also the initial number of workers the cluster will have after creation.
                          type: number
                      type: object
                    type: array
                  autoterminationMinutes:
                    description: Automatically terminate the cluster after being inactive for this time in minutes. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination. Defaults to 60.  We highly recommend having this setting present for Interactive/BI clusters.
                    type: number
                  awsAttributes:
                    items:
                      properties:
                        availability:
                          description: 'Availability type used for all subsequent nodes past the first_on_demand ones. Valid values are SPOT, SPOT_WITH_FALLBACK and ON_DEMAND. Note: If first_on_demand is zero, this availability type will be used for the entire cluster. Backend default value is SPOT_WITH_FALLBACK and could change in the future'
                          type: string
                        ebsVolumeCount:
                          description: The number of volumes launched for each instance. You can choose up to 10 volumes. This feature is only enabled for supported node types. Legacy node types cannot specify custom EBS volumes. For node types with no instance store, at least one EBS volume needs to be specified; otherwise, cluster creation will fail. These EBS volumes will be mounted at /ebs0, /ebs1, and etc. Instance store volumes will be mounted at /local_disk0, /local_disk1, and etc. If EBS volumes are attached, Databricks will configure Spark to use only the EBS volumes for scratch storage because heterogeneously sized scratch devices can lead to inefficient disk utilization. If no EBS volumes are attached, Databricks will configure Spark to use instance store volumes. If EBS volumes are specified, then the Spark configuration spark.local.dir will be overridden.
                          type: number
                        ebsVolumeIops:
                          type: number
                        ebsVolumeSize:
                          description: The size of each EBS volume (in GiB) launched for each instance. For general purpose SSD, this value must be within the range 100 - 4096. For throughput optimized HDD, this value must be within the range 500 - 4096. Custom EBS volumes cannot be specified for the legacy node types (memory-optimized and compute-optimized).
                          type: number
                        ebsVolumeThroughput:
                          type: number
                        ebsVolumeType:
                          description: The type of EBS volumes that will be launched with this cluster. Valid values are GENERAL_PURPOSE_SSD or THROUGHPUT_OPTIMIZED_HDD. Use this option only if you're not picking Delta Optimized  node types.
                          type: string
                        firstOnDemand:
                          description: The first first_on_demand nodes of the cluster will be placed on on-demand instances. If this value is greater than 0, the cluster driver node will be placed on an on-demand instance. If this value is greater than or equal to the current cluster size, all nodes will be placed on on-demand instances. If this value is less than the current cluster size, first_on_demand nodes will be placed on on-demand instances, and the remainder will be placed on availability instances. This value does not affect cluster size and cannot be mutated over the lifetime of a cluster. If unspecified, the default value is 0.
                          type: number
                        instanceProfileArn:
                          description: Nodes for this cluster will only be placed on AWS instances with this instance profile.
                          type: string
                        spotBidPricePercent:
                          description: The max price for AWS spot instances, as a percentage of the corresponding instance typeâ€™s on-demand price. For example, if this field is set to 50, and the cluster needs a new i3.xlarge spot instance, then the max price is half of the price of on-demand i3.xlarge instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand i3.xlarge instances. If not specified, the default value is 100. When spot instances are requested for this cluster, only spot instances whose max price percentage matches this field will be considered. For safety, we enforce this field to be no more than 10000.
                          type: number
                        zoneId:
                          description: Identifier for the availability zone/datacenter in which the cluster resides. This string will be of a form like us-west-2a. The provided availability zone must be in the same region as the Databricks deployment. For example, us-west-2a is not a valid zone ID if the Databricks deployment resides in the us-east-1 region. Enable automatic availability zone selection ("Auto-AZ"), by setting the value auto. Databricks selects the AZ based on available IPs in the workspace subnets and retries in other availability zones if AWS returns insufficient capacity errors.
                          type: string
                      type: object
                    type: array
                  azureAttributes:
                    items:
                      properties:
                        availability:
                          description: 'Availability type used for all subsequent nodes past the first_on_demand ones. Valid values are SPOT_AZURE, SPOT_WITH_FALLBACK_AZURE, and ON_DEMAND_AZURE. Note: If first_on_demand is zero, this availability type will be used for the entire cluster.'
                          type: string
                        firstOnDemand:
                          description: The first first_on_demand nodes of the cluster will be placed on on-demand instances. If this value is greater than 0, the cluster driver node will be placed on an on-demand instance. If this value is greater than or equal to the current cluster size, all nodes will be placed on on-demand instances. If this value is less than the current cluster size, first_on_demand nodes will be placed on on-demand instances, and the remainder will be placed on availability instances. This value does not affect cluster size and cannot be mutated over the lifetime of a cluster.
                          type: number
                        logAnalyticsInfo:
                          items:
                            properties:
                              logAnalyticsPrimaryKey:
                                type: string
                              logAnalyticsWorkspaceId:
                                description: Canonical unique identifier for the cluster.
                                type: string
                            type: object
                          type: array
                        spotBidMaxPrice:
                          description: The max bid price used for Azure spot instances. You can set this to greater than or equal to the current spot price. You can also set this to -1, which specifies that the instance cannot be evicted on the basis of price. The price for the instance will be the current price for spot instances or the price for a standard instance.
                          type: number
                      type: object
                    type: array
                  clusterLogConf:
                    items:
                      properties:
                        dbfs:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        s3:
                          items:
                            properties:
                              cannedAcl:
                                description: Set canned access control list, e.g. bucket-owner-full-control. If canned_cal is set, the cluster instance profile must have s3:PutObjectAcl permission on the destination bucket and prefix. The full list of possible canned ACLs can be found here. By default, only the object owner gets full control. If you are using a cross-account role for writing data, you may want to set bucket-owner-full-control to make bucket owners able to read the logs.
                                type: string
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                              enableEncryption:
                                description: Enable server-side encryption, false by default.
                                type: boolean
                              encryptionType:
                                description: The encryption type, it could be sse-s3 or sse-kms. It is used only when encryption is enabled, and the default type is sse-s3.
                                type: string
                              endpoint:
                                description: S3 endpoint, e.g. https://s3-us-west-2.amazonaws.com. Either region or endpoint needs to be set. If both are set, the endpoint is used.
                                type: string
                              kmsKey:
                                description: KMS key used if encryption is enabled and encryption type is set to sse-kms.
                                type: string
                              region:
                                description: S3 region, e.g. us-west-2. Either region or endpoint must be set. If both are set, the endpoint is used.
                                type: string
                            type: object
                          type: array
                        volumes:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  clusterMountInfo:
                    items:
                      properties:
                        localMountDirPath:
                          description: path inside the Spark container.
                          type: string
                        networkFilesystemInfo:
                          description: 'block specifying connection. It consists of:'
                          items:
                            properties:
                              mountOptions:
                                description: string that will be passed as options passed to the mount command.
                                type: string
                              serverAddress:
                                description: host name.
                                type: string
                            type: object
                          type: array
                        remoteMountDirPath:
                          description: string specifying path to mount on the remote service.
                          type: string
                      type: object
                    type: array
                  clusterName:
                    description: Cluster name, which doesn't have to be unique. If not specified at creation, the cluster name will be an empty string.
                    type: string
                  customTags:
                    additionalProperties:
                      type: string
                    description: Additional tags for cluster resources. Databricks will tag all cluster resources (e.g., AWS EC2 instances and EBS volumes) with these tags in addition to default_tags. If a custom cluster tag has the same name as a default cluster tag, the custom tag is prefixed with an x_ when it is propagated.
                    type: object
                    x-kubernetes-map-type: granular
                  dataSecurityMode:
                    description: 'Select the security features of the cluster (see API docs for full list of values). Unity Catalog requires SINGLE_USER or USER_ISOLATION mode. LEGACY_PASSTHROUGH for passthrough cluster and LEGACY_TABLE_ACL for Table ACL cluster. If omitted, default security features are enabled. To disable security features use NONE or legacy mode NO_ISOLATION.  If kind is specified, then the following options are available:'
                    type: string
                  dockerImage:
                    items:
                      properties:
                        basicAuth:
                          description: basic_auth.username and basic_auth.password for Docker repository. Docker registry credentials are encrypted when they are stored in Databricks internal storage and when they are passed to a registry upon fetching Docker images at cluster launch. However, other authenticated and authorized API users of this workspace can access the username and password.
                          items:
                            properties:
                              passwordSecretRef:
                                description: A SecretKeySelector is a reference to a secret key in an arbitrary namespace.
                                properties:
                                  key:
                                    description: The key to select.
                                    type: string
                                  name:
                                    description: Name of the secret.
                                    type: string
                                  namespace:
                                    description: Namespace of the secret.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                              username:
                                type: string
                            type: object
                          type: array
                        url:
                          description: URL for the Docker image
                          type: string
                      type: object
                    type: array
                  driverInstancePoolId:
                    description: similar to instance_pool_id, but for driver node. If omitted, and instance_pool_id is specified, then the driver will be allocated from that pool.
                    type: string
                  driverNodeTypeId:
                    description: The node type of the Spark driver. This field is optional; if unset, API will set the driver node type to the same value as node_type_id defined above.
                    type: string
                  enableElasticDisk:
                    description: If you don't want to allocate a fixed number of EBS volumes at cluster creation time, use autoscaling local storage. With autoscaling local storage, Databricks monitors the amount of free disk space available on your cluster's Spark workers. If a worker begins to run too low on disk, Databricks automatically attaches a new EBS volume to the worker before it runs out of disk space. EBS volumes are attached up to a limit of 5 TB of total disk space per instance (including the instance's local storage). To scale down EBS usage, make sure you have autotermination_minutes and autoscale attributes set. More documentation available at cluster configuration page.
                    type: boolean
                  enableLocalDiskEncryption:
                    description: Some instance types you use to run clusters may have locally attached disks. Databricks may store shuffle data or temporary data on these locally attached disks. To ensure that all data at rest is encrypted for all storage types, including shuffle data stored temporarily on your cluster's local disks, you can enable local disk encryption. When local disk encryption is enabled, Databricks generates an encryption key locally unique to each cluster node and uses it to encrypt all data stored on local disks. The scope of the key is local to each cluster node and is destroyed along with the cluster node itself. During its lifetime, the key resides in memory for encryption and decryption and is stored encrypted on the disk. Your workloads may run more slowly because of the performance impact of reading and writing encrypted data to and from local volumes. This feature is not available for all Azure Databricks subscriptions. Contact your Microsoft or Databricks account representative to request access.
                    type: boolean
                  gcpAttributes:
                    items:
                      properties:
                        availability:
                          description: ', and will be removed soon.'
                          type: string
                        bootDiskSize:
                          description: Boot disk size in GB
                          type: number
                        googleServiceAccount:
                          description: Google Service Account email address that the cluster uses to authenticate with Google Identity. This field is used for authentication with the GCS and BigQuery data sources.
                          type: string
                        localSsdCount:
                          description: Number of local SSD disks (each is 375GB in size) that will be attached to each node of the cluster.
                          type: number
                        usePreemptibleExecutors:
                          description: 'if we should use preemptible executors (GCP documentation). Warning: this field is deprecated in favor of'
                          type: boolean
                        zoneId:
                          description: 'Identifier for the availability zone in which the cluster resides. This can be one of the following:'
                          type: string
                      type: object
                    type: array
                  idempotencyToken:
                    description: An optional token to guarantee the idempotency of cluster creation requests. If an active cluster with the provided token already exists, the request will not create a new cluster, but it will return the existing running cluster's ID instead. If you specify the idempotency token, upon failure, you can retry until the request succeeds. Databricks platform guarantees to launch exactly one cluster with that idempotency token. This token should have at most 64 characters.
                    type: string
                  initScripts:
                    items:
                      properties:
                        abfss:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        dbfs:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        file:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        gcs:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        s3:
                          items:
                            properties:
                              cannedAcl:
                                description: Set canned access control list, e.g. bucket-owner-full-control. If canned_cal is set, the cluster instance profile must have s3:PutObjectAcl permission on the destination bucket and prefix. The full list of possible canned ACLs can be found here. By default, only the object owner gets full control. If you are using a cross-account role for writing data, you may want to set bucket-owner-full-control to make bucket owners able to read the logs.
                                type: string
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                              enableEncryption:
                                description: Enable server-side encryption, false by default.
                                type: boolean
                              encryptionType:
                                description: The encryption type, it could be sse-s3 or sse-kms. It is used only when encryption is enabled, and the default type is sse-s3.
                                type: string
                              endpoint:
                                description: S3 endpoint, e.g. https://s3-us-west-2.amazonaws.com. Either region or endpoint needs to be set. If both are set, the endpoint is used.
                                type: string
                              kmsKey:
                                description: KMS key used if encryption is enabled and encryption type is set to sse-kms.
                                type: string
                              region:
                                description: S3 region, e.g. us-west-2. Either region or endpoint must be set. If both are set, the endpoint is used.
                                type: string
                            type: object
                          type: array
                        volumes:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        workspace:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  instancePoolId:
                    description: required if node_type_id is not given) - To reduce cluster start time, you can attach a cluster to a predefined pool of idle instances. When attached to a pool, a cluster allocates its driver and worker nodes from the pool. If the pool does not have sufficient idle resources to accommodate the cluster's request, it expands by allocating new instances from the instance provider. When an attached cluster changes its state to TERMINATED, the instances it used are returned to the pool and reused by a different cluster.
                    type: string
                  isPinned:
                    description: boolean value specifying if the cluster is pinned (not pinned by default). You must be a Databricks administrator to use this.  The pinned clusters' maximum number is limited to 100, so apply may fail if you have more than that (this number may change over time, so check Databricks documentation for actual number).
                    type: boolean
                  isSingleNode:
                    description: When set to true, Databricks will automatically set single node related custom_tags, spark_conf, and num_workers.
                    type: boolean
                  kind:
                    description: 'The kind of compute described by this compute specification.  Possible values (see API docs for full list): CLASSIC_PREVIEW (if corresponding public preview is enabled).'
                    type: string
                  library:
                    items:
                      properties:
                        cran:
                          items:
                            properties:
                              package:
                                type: string
                              repo:
                                type: string
                            type: object
                          type: array
                        egg:
                          type: string
                        jar:
                          type: string
                        maven:
                          items:
                            properties:
                              coordinates:
                                type: string
                              exclusions:
                                items:
                                  type: string
                                type: array
                              repo:
                                type: string
                            type: object
                          type: array
                        pypi:
                          items:
                            properties:
                              package:
                                type: string
                              repo:
                                type: string
                            type: object
                          type: array
                        requirements:
                          type: string
                        whl:
                          type: string
                      type: object
                    type: array
                  noWait:
                    description: If true, the provider will not wait for the cluster to reach RUNNING state when creating the cluster, allowing cluster creation and library installation to continue asynchronously. Defaults to false (the provider will wait for cluster creation and library installation to succeed).
                    type: boolean
                  nodeTypeId:
                    description: Any supported databricks_node_type id. If instance_pool_id is specified, this field is not needed.
                    type: string
                  numWorkers:
                    description: Number of worker nodes that this cluster should have. A cluster has one Spark driver and num_workers executors for a total of num_workers + 1 Spark nodes.
                    type: number
                  policyId:
                    description: Identifier of Cluster Policy to validate cluster and preset certain defaults. The primary use for cluster policies is to allow users to create policy-scoped clusters via UI rather than sharing configuration for API-created clusters. For example, when you specify policy_id of external metastore policy, you still have to fill in relevant keys for spark_conf.
                    type: string
                  remoteDiskThroughput:
                    type: number
                  runtimeEngine:
                    description: 'The type of runtime engine to use. If not specified, the runtime engine type is inferred based on the spark_version value. Allowed values include: PHOTON, STANDARD.'
                    type: string
                  singleUserName:
                    description: The optional user name of the user (or group name if kind if specified) to assign to an interactive cluster. This field is required when using data_security_mode set to SINGLE_USER or AAD Passthrough for Azure Data Lake Storage (ADLS) with a single-user cluster (i.e., not high-concurrency clusters).
                    type: string
                  sparkConf:
                    additionalProperties:
                      type: string
                    description: Map with key-value pairs to fine-tune Spark clusters, where you can provide custom Spark configuration properties in a cluster configuration.
                    type: object
                    x-kubernetes-map-type: granular
                  sparkEnvVars:
                    additionalProperties:
                      type: string
                    description: Map with environment variable key-value pairs to fine-tune Spark clusters. Key-value pairs of the form (X,Y) are exported (i.e., X='Y') while launching the driver and workers.
                    type: object
                    x-kubernetes-map-type: granular
                  sparkVersion:
                    description: Runtime version of the cluster. Any supported databricks_spark_version id.  We advise using Cluster Policies to restrict the list of versions for simplicity while maintaining enough control.
                    type: string
                  sshPublicKeys:
                    description: SSH public key contents that will be added to each Spark node in this cluster. The corresponding private keys can be used to login with the user name ubuntu on port 2200. You can specify up to 10 keys.
                    items:
                      type: string
                    type: array
                  totalInitialRemoteDiskSize:
                    type: number
                  useMlRuntime:
                    description: Whenever ML runtime should be selected or not.  Actual runtime is determined by spark_version (DBR release), this field use_ml_runtime, and whether node_type_id is GPU node or not.
                    type: boolean
                  workloadType:
                    items:
                      properties:
                        clients:
                          items:
                            properties:
                              jobs:
                                description: "boolean flag defining if it's possible to run Databricks Jobs on this cluster. Default: true."
                                type: boolean
                              notebooks:
                                description: "boolean flag defining if it's possible to run notebooks on this cluster. Default: true."
                                type: boolean
                            type: object
                          type: array
                      type: object
                    type: array
                type: object
              initProvider:
                description: >-
                  THIS IS A BETA FIELD. It will be honored

                  unless the Management Policies feature flag is disabled.

                  InitProvider holds the same fields as ForProvider, with the exception

                  of Identifier and other resource reference fields. The fields that are

                  in InitProvider are merged into ForProvider when the resource is created.

                  The same fields are also added to the terraform ignore_changes hook, to

                  avoid updating them after creation. This is useful for fields that are

                  required on creation, but we do not desire to update them after creation,

                  for example because of an external controller is managing them, like an

                  autoscaler.
                properties:
                  applyPolicyDefaultValues:
                    description: Whether to use policy default values for missing cluster attributes.
                    type: boolean
                  autoscale:
                    items:
                      properties:
                        maxWorkers:
                          description: The maximum number of workers to which the cluster can scale up when overloaded. max_workers must be strictly greater than min_workers.
                          type: number
                        minWorkers:
                          description: The minimum number of workers to which the cluster can scale down when underutilized. It is also the initial number of workers the cluster will have after creation.
                          type: number
                      type: object
                    type: array
                  autoterminationMinutes:
                    description: Automatically terminate the cluster after being inactive for this time in minutes. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination. Defaults to 60.  We highly recommend having this setting present for Interactive/BI clusters.
                    type: number
                  awsAttributes:
                    items:
                      properties:
                        availability:
                          description: 'Availability type used for all subsequent nodes past the first_on_demand ones. Valid values are SPOT, SPOT_WITH_FALLBACK and ON_DEMAND. Note: If first_on_demand is zero, this availability type will be used for the entire cluster. Backend default value is SPOT_WITH_FALLBACK and could change in the future'
                          type: string
                        ebsVolumeCount:
                          description: The number of volumes launched for each instance. You can choose up to 10 volumes. This feature is only enabled for supported node types. Legacy node types cannot specify custom EBS volumes. For node types with no instance store, at least one EBS volume needs to be specified; otherwise, cluster creation will fail. These EBS volumes will be mounted at /ebs0, /ebs1, and etc. Instance store volumes will be mounted at /local_disk0, /local_disk1, and etc. If EBS volumes are attached, Databricks will configure Spark to use only the EBS volumes for scratch storage because heterogeneously sized scratch devices can lead to inefficient disk utilization. If no EBS volumes are attached, Databricks will configure Spark to use instance store volumes. If EBS volumes are specified, then the Spark configuration spark.local.dir will be overridden.
                          type: number
                        ebsVolumeIops:
                          type: number
                        ebsVolumeSize:
                          description: The size of each EBS volume (in GiB) launched for each instance. For general purpose SSD, this value must be within the range 100 - 4096. For throughput optimized HDD, this value must be within the range 500 - 4096. Custom EBS volumes cannot be specified for the legacy node types (memory-optimized and compute-optimized).
                          type: number
                        ebsVolumeThroughput:
                          type: number
                        ebsVolumeType:
                          description: The type of EBS volumes that will be launched with this cluster. Valid values are GENERAL_PURPOSE_SSD or THROUGHPUT_OPTIMIZED_HDD. Use this option only if you're not picking Delta Optimized  node types.
                          type: string
                        firstOnDemand:
                          description: The first first_on_demand nodes of the cluster will be placed on on-demand instances. If this value is greater than 0, the cluster driver node will be placed on an on-demand instance. If this value is greater than or equal to the current cluster size, all nodes will be placed on on-demand instances. If this value is less than the current cluster size, first_on_demand nodes will be placed on on-demand instances, and the remainder will be placed on availability instances. This value does not affect cluster size and cannot be mutated over the lifetime of a cluster. If unspecified, the default value is 0.
                          type: number
                        instanceProfileArn:
                          description: Nodes for this cluster will only be placed on AWS instances with this instance profile.
                          type: string
                        spotBidPricePercent:
                          description: The max price for AWS spot instances, as a percentage of the corresponding instance typeâ€™s on-demand price. For example, if this field is set to 50, and the cluster needs a new i3.xlarge spot instance, then the max price is half of the price of on-demand i3.xlarge instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand i3.xlarge instances. If not specified, the default value is 100. When spot instances are requested for this cluster, only spot instances whose max price percentage matches this field will be considered. For safety, we enforce this field to be no more than 10000.
                          type: number
                        zoneId:
                          description: Identifier for the availability zone/datacenter in which the cluster resides. This string will be of a form like us-west-2a. The provided availability zone must be in the same region as the Databricks deployment. For example, us-west-2a is not a valid zone ID if the Databricks deployment resides in the us-east-1 region. Enable automatic availability zone selection ("Auto-AZ"), by setting the value auto. Databricks selects the AZ based on available IPs in the workspace subnets and retries in other availability zones if AWS returns insufficient capacity errors.
                          type: string
                      type: object
                    type: array
                  azureAttributes:
                    items:
                      properties:
                        availability:
                          description: 'Availability type used for all subsequent nodes past the first_on_demand ones. Valid values are SPOT_AZURE, SPOT_WITH_FALLBACK_AZURE, and ON_DEMAND_AZURE. Note: If first_on_demand is zero, this availability type will be used for the entire cluster.'
                          type: string
                        firstOnDemand:
                          description: The first first_on_demand nodes of the cluster will be placed on on-demand instances. If this value is greater than 0, the cluster driver node will be placed on an on-demand instance. If this value is greater than or equal to the current cluster size, all nodes will be placed on on-demand instances. If this value is less than the current cluster size, first_on_demand nodes will be placed on on-demand instances, and the remainder will be placed on availability instances. This value does not affect cluster size and cannot be mutated over the lifetime of a cluster.
                          type: number
                        logAnalyticsInfo:
                          items:
                            properties:
                              logAnalyticsPrimaryKey:
                                type: string
                              logAnalyticsWorkspaceId:
                                description: Canonical unique identifier for the cluster.
                                type: string
                            type: object
                          type: array
                        spotBidMaxPrice:
                          description: The max bid price used for Azure spot instances. You can set this to greater than or equal to the current spot price. You can also set this to -1, which specifies that the instance cannot be evicted on the basis of price. The price for the instance will be the current price for spot instances or the price for a standard instance.
                          type: number
                      type: object
                    type: array
                  clusterLogConf:
                    items:
                      properties:
                        dbfs:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        s3:
                          items:
                            properties:
                              cannedAcl:
                                description: Set canned access control list, e.g. bucket-owner-full-control. If canned_cal is set, the cluster instance profile must have s3:PutObjectAcl permission on the destination bucket and prefix. The full list of possible canned ACLs can be found here. By default, only the object owner gets full control. If you are using a cross-account role for writing data, you may want to set bucket-owner-full-control to make bucket owners able to read the logs.
                                type: string
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                              enableEncryption:
                                description: Enable server-side encryption, false by default.
                                type: boolean
                              encryptionType:
                                description: The encryption type, it could be sse-s3 or sse-kms. It is used only when encryption is enabled, and the default type is sse-s3.
                                type: string
                              endpoint:
                                description: S3 endpoint, e.g. https://s3-us-west-2.amazonaws.com. Either region or endpoint needs to be set. If both are set, the endpoint is used.
                                type: string
                              kmsKey:
                                description: KMS key used if encryption is enabled and encryption type is set to sse-kms.
                                type: string
                              region:
                                description: S3 region, e.g. us-west-2. Either region or endpoint must be set. If both are set, the endpoint is used.
                                type: string
                            type: object
                          type: array
                        volumes:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  clusterMountInfo:
                    items:
                      properties:
                        localMountDirPath:
                          description: path inside the Spark container.
                          type: string
                        networkFilesystemInfo:
                          description: 'block specifying connection. It consists of:'
                          items:
                            properties:
                              mountOptions:
                                description: string that will be passed as options passed to the mount command.
                                type: string
                              serverAddress:
                                description: host name.
                                type: string
                            type: object
                          type: array
                        remoteMountDirPath:
                          description: string specifying path to mount on the remote service.
                          type: string
                      type: object
                    type: array
                  clusterName:
                    description: Cluster name, which doesn't have to be unique. If not specified at creation, the cluster name will be an empty string.
                    type: string
                  customTags:
                    additionalProperties:
                      type: string
                    description: Additional tags for cluster resources. Databricks will tag all cluster resources (e.g., AWS EC2 instances and EBS volumes) with these tags in addition to default_tags. If a custom cluster tag has the same name as a default cluster tag, the custom tag is prefixed with an x_ when it is propagated.
                    type: object
                    x-kubernetes-map-type: granular
                  dataSecurityMode:
                    description: 'Select the security features of the cluster (see API docs for full list of values). Unity Catalog requires SINGLE_USER or USER_ISOLATION mode. LEGACY_PASSTHROUGH for passthrough cluster and LEGACY_TABLE_ACL for Table ACL cluster. If omitted, default security features are enabled. To disable security features use NONE or legacy mode NO_ISOLATION.  If kind is specified, then the following options are available:'
                    type: string
                  dockerImage:
                    items:
                      properties:
                        basicAuth:
                          description: basic_auth.username and basic_auth.password for Docker repository. Docker registry credentials are encrypted when they are stored in Databricks internal storage and when they are passed to a registry upon fetching Docker images at cluster launch. However, other authenticated and authorized API users of this workspace can access the username and password.
                          items:
                            properties:
                              passwordSecretRef:
                                description: A SecretKeySelector is a reference to a secret key in an arbitrary namespace.
                                properties:
                                  key:
                                    description: The key to select.
                                    type: string
                                  name:
                                    description: Name of the secret.
                                    type: string
                                  namespace:
                                    description: Namespace of the secret.
                                    type: string
                                required:
                                - key
                                - name
                                - namespace
                                type: object
                              username:
                                type: string
                            required:
                            - passwordSecretRef
                            type: object
                          type: array
                        url:
                          description: URL for the Docker image
                          type: string
                      type: object
                    type: array
                  driverInstancePoolId:
                    description: similar to instance_pool_id, but for driver node. If omitted, and instance_pool_id is specified, then the driver will be allocated from that pool.
                    type: string
                  driverNodeTypeId:
                    description: The node type of the Spark driver. This field is optional; if unset, API will set the driver node type to the same value as node_type_id defined above.
                    type: string
                  enableElasticDisk:
                    description: If you don't want to allocate a fixed number of EBS volumes at cluster creation time, use autoscaling local storage. With autoscaling local storage, Databricks monitors the amount of free disk space available on your cluster's Spark workers. If a worker begins to run too low on disk, Databricks automatically attaches a new EBS volume to the worker before it runs out of disk space. EBS volumes are attached up to a limit of 5 TB of total disk space per instance (including the instance's local storage). To scale down EBS usage, make sure you have autotermination_minutes and autoscale attributes set. More documentation available at cluster configuration page.
                    type: boolean
                  enableLocalDiskEncryption:
                    description: Some instance types you use to run clusters may have locally attached disks. Databricks may store shuffle data or temporary data on these locally attached disks. To ensure that all data at rest is encrypted for all storage types, including shuffle data stored temporarily on your cluster's local disks, you can enable local disk encryption. When local disk encryption is enabled, Databricks generates an encryption key locally unique to each cluster node and uses it to encrypt all data stored on local disks. The scope of the key is local to each cluster node and is destroyed along with the cluster node itself. During its lifetime, the key resides in memory for encryption and decryption and is stored encrypted on the disk. Your workloads may run more slowly because of the performance impact of reading and writing encrypted data to and from local volumes. This feature is not available for all Azure Databricks subscriptions. Contact your Microsoft or Databricks account representative to request access.
                    type: boolean
                  gcpAttributes:
                    items:
                      properties:
                        availability:
                          description: ', and will be removed soon.'
                          type: string
                        bootDiskSize:
                          description: Boot disk size in GB
                          type: number
                        googleServiceAccount:
                          description: Google Service Account email address that the cluster uses to authenticate with Google Identity. This field is used for authentication with the GCS and BigQuery data sources.
                          type: string
                        localSsdCount:
                          description: Number of local SSD disks (each is 375GB in size) that will be attached to each node of the cluster.
                          type: number
                        usePreemptibleExecutors:
                          description: 'if we should use preemptible executors (GCP documentation). Warning: this field is deprecated in favor of'
                          type: boolean
                        zoneId:
                          description: 'Identifier for the availability zone in which the cluster resides. This can be one of the following:'
                          type: string
                      type: object
                    type: array
                  idempotencyToken:
                    description: An optional token to guarantee the idempotency of cluster creation requests. If an active cluster with the provided token already exists, the request will not create a new cluster, but it will return the existing running cluster's ID instead. If you specify the idempotency token, upon failure, you can retry until the request succeeds. Databricks platform guarantees to launch exactly one cluster with that idempotency token. This token should have at most 64 characters.
                    type: string
                  initScripts:
                    items:
                      properties:
                        abfss:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        dbfs:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        file:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        gcs:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        s3:
                          items:
                            properties:
                              cannedAcl:
                                description: Set canned access control list, e.g. bucket-owner-full-control. If canned_cal is set, the cluster instance profile must have s3:PutObjectAcl permission on the destination bucket and prefix. The full list of possible canned ACLs can be found here. By default, only the object owner gets full control. If you are using a cross-account role for writing data, you may want to set bucket-owner-full-control to make bucket owners able to read the logs.
                                type: string
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                              enableEncryption:
                                description: Enable server-side encryption, false by default.
                                type: boolean
                              encryptionType:
                                description: The encryption type, it could be sse-s3 or sse-kms. It is used only when encryption is enabled, and the default type is sse-s3.
                                type: string
                              endpoint:
                                description: S3 endpoint, e.g. https://s3-us-west-2.amazonaws.com. Either region or endpoint needs to be set. If both are set, the endpoint is used.
                                type: string
                              kmsKey:
                                description: KMS key used if encryption is enabled and encryption type is set to sse-kms.
                                type: string
                              region:
                                description: S3 region, e.g. us-west-2. Either region or endpoint must be set. If both are set, the endpoint is used.
                                type: string
                            type: object
                          type: array
                        volumes:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        workspace:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  instancePoolId:
                    description: required if node_type_id is not given) - To reduce cluster start time, you can attach a cluster to a predefined pool of idle instances. When attached to a pool, a cluster allocates its driver and worker nodes from the pool. If the pool does not have sufficient idle resources to accommodate the cluster's request, it expands by allocating new instances from the instance provider. When an attached cluster changes its state to TERMINATED, the instances it used are returned to the pool and reused by a different cluster.
                    type: string
                  isPinned:
                    description: boolean value specifying if the cluster is pinned (not pinned by default). You must be a Databricks administrator to use this.  The pinned clusters' maximum number is limited to 100, so apply may fail if you have more than that (this number may change over time, so check Databricks documentation for actual number).
                    type: boolean
                  isSingleNode:
                    description: When set to true, Databricks will automatically set single node related custom_tags, spark_conf, and num_workers.
                    type: boolean
                  kind:
                    description: 'The kind of compute described by this compute specification.  Possible values (see API docs for full list): CLASSIC_PREVIEW (if corresponding public preview is enabled).'
                    type: string
                  library:
                    items:
                      properties:
                        cran:
                          items:
                            properties:
                              package:
                                type: string
                              repo:
                                type: string
                            type: object
                          type: array
                        egg:
                          type: string
                        jar:
                          type: string
                        maven:
                          items:
                            properties:
                              coordinates:
                                type: string
                              exclusions:
                                items:
                                  type: string
                                type: array
                              repo:
                                type: string
                            type: object
                          type: array
                        pypi:
                          items:
                            properties:
                              package:
                                type: string
                              repo:
                                type: string
                            type: object
                          type: array
                        requirements:
                          type: string
                        whl:
                          type: string
                      type: object
                    type: array
                  noWait:
                    description: If true, the provider will not wait for the cluster to reach RUNNING state when creating the cluster, allowing cluster creation and library installation to continue asynchronously. Defaults to false (the provider will wait for cluster creation and library installation to succeed).
                    type: boolean
                  nodeTypeId:
                    description: Any supported databricks_node_type id. If instance_pool_id is specified, this field is not needed.
                    type: string
                  numWorkers:
                    description: Number of worker nodes that this cluster should have. A cluster has one Spark driver and num_workers executors for a total of num_workers + 1 Spark nodes.
                    type: number
                  policyId:
                    description: Identifier of Cluster Policy to validate cluster and preset certain defaults. The primary use for cluster policies is to allow users to create policy-scoped clusters via UI rather than sharing configuration for API-created clusters. For example, when you specify policy_id of external metastore policy, you still have to fill in relevant keys for spark_conf.
                    type: string
                  remoteDiskThroughput:
                    type: number
                  runtimeEngine:
                    description: 'The type of runtime engine to use. If not specified, the runtime engine type is inferred based on the spark_version value. Allowed values include: PHOTON, STANDARD.'
                    type: string
                  singleUserName:
                    description: The optional user name of the user (or group name if kind if specified) to assign to an interactive cluster. This field is required when using data_security_mode set to SINGLE_USER or AAD Passthrough for Azure Data Lake Storage (ADLS) with a single-user cluster (i.e., not high-concurrency clusters).
                    type: string
                  sparkConf:
                    additionalProperties:
                      type: string
                    description: Map with key-value pairs to fine-tune Spark clusters, where you can provide custom Spark configuration properties in a cluster configuration.
                    type: object
                    x-kubernetes-map-type: granular
                  sparkEnvVars:
                    additionalProperties:
                      type: string
                    description: Map with environment variable key-value pairs to fine-tune Spark clusters. Key-value pairs of the form (X,Y) are exported (i.e., X='Y') while launching the driver and workers.
                    type: object
                    x-kubernetes-map-type: granular
                  sparkVersion:
                    description: Runtime version of the cluster. Any supported databricks_spark_version id.  We advise using Cluster Policies to restrict the list of versions for simplicity while maintaining enough control.
                    type: string
                  sshPublicKeys:
                    description: SSH public key contents that will be added to each Spark node in this cluster. The corresponding private keys can be used to login with the user name ubuntu on port 2200. You can specify up to 10 keys.
                    items:
                      type: string
                    type: array
                  totalInitialRemoteDiskSize:
                    type: number
                  useMlRuntime:
                    description: Whenever ML runtime should be selected or not.  Actual runtime is determined by spark_version (DBR release), this field use_ml_runtime, and whether node_type_id is GPU node or not.
                    type: boolean
                  workloadType:
                    items:
                      properties:
                        clients:
                          items:
                            properties:
                              jobs:
                                description: "boolean flag defining if it's possible to run Databricks Jobs on this cluster. Default: true."
                                type: boolean
                              notebooks:
                                description: "boolean flag defining if it's possible to run notebooks on this cluster. Default: true."
                                type: boolean
                            type: object
                          type: array
                      type: object
                    type: array
                type: object
              managementPolicies:
                default:
                - '*'
                description: >-
                  THIS IS A BETA FIELD. It is on by default but can be opted out

                  through a Crossplane feature flag.

                  ManagementPolicies specify the array of actions Crossplane is allowed to

                  take on the managed and external resources.

                  This field is planned to replace the DeletionPolicy field in a future

                  release. Currently, both could be set independently and non-default

                  values would be honored if the feature flag is enabled. If both are

                  custom, the DeletionPolicy field will be ignored.

                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223

                  and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
                items:
                  description: >-
                    A ManagementAction represents an action that the Crossplane controllers

                    can take on an external resource.
                  enum:
                  - Observe
                  - Create
                  - Update
                  - Delete
                  - LateInitialize
                  - '*'
                  type: string
                type: array
              providerConfigRef:
                default:
                  name: default
                description: >-
                  ProviderConfigReference specifies how the provider that will be used to

                  create, observe, update, and delete this managed resource should be

                  configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: >-
                          Resolution specifies whether resolution of this reference is required.

                          The default is 'Required', which means the reconcile will fail if the

                          reference cannot be resolved. 'Optional' means this reference will be

                          a no-op if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: >-
                          Resolve specifies when this reference should be resolved. The default

                          is 'IfNotPresent', which will attempt to resolve the reference only when

                          the corresponding field is not present. Use 'Always' to resolve the

                          reference on every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: >-
                  PublishConnectionDetailsTo specifies the connection secret config which

                  contains a name, metadata and a reference to secret store config to

                  which any connection details for this managed resource should be written.

                  Connection details frequently include the endpoint, username,

                  and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: >-
                      SecretStoreConfigRef specifies which secret store config should be used

                      for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: >-
                              Resolution specifies whether resolution of this reference is required.

                              The default is 'Required', which means the reconcile will fail if the

                              reference cannot be resolved. 'Optional' means this reference will be

                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: >-
                              Resolve specifies when this reference should be resolved. The default

                              is 'IfNotPresent', which will attempt to resolve the reference only when

                              the corresponding field is not present. Use 'Always' to resolve the

                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: >-
                          Annotations are the annotations to be added to connection secret.

                          - For Kubernetes secrets, this will be used as "metadata.annotations".

                          - It is up to Secret Store implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: >-
                          Labels are the labels/tags to be added to connection secret.

                          - For Kubernetes secrets, this will be used as "metadata.labels".

                          - It is up to Secret Store implementation for others store types.
                        type: object
                      type:
                        description: >-
                          Type is the SecretType for the connection secret.

                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: >-
                  WriteConnectionSecretToReference specifies the namespace and name of a

                  Secret to which any connection details for this managed resource should

                  be written. Connection details frequently include the endpoint, username,

                  and password required to connect to the managed resource.

                  This field is planned to be replaced in a future release in favor of

                  PublishConnectionDetailsTo. Currently, both could be set independently

                  and connection details would be published to both without affecting

                  each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
            x-kubernetes-validations:
            - message: spec.forProvider.sparkVersion is a required parameter
              rule: "!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sparkVersion) || (has(self.initProvider) && has(self.initProvider.sparkVersion))"
          status:
            description: ClusterStatus defines the observed state of Cluster.
            properties:
              atProvider:
                properties:
                  applyPolicyDefaultValues:
                    description: Whether to use policy default values for missing cluster attributes.
                    type: boolean
                  autoscale:
                    items:
                      properties:
                        maxWorkers:
                          description: The maximum number of workers to which the cluster can scale up when overloaded. max_workers must be strictly greater than min_workers.
                          type: number
                        minWorkers:
                          description: The minimum number of workers to which the cluster can scale down when underutilized. It is also the initial number of workers the cluster will have after creation.
                          type: number
                      type: object
                    type: array
                  autoterminationMinutes:
                    description: Automatically terminate the cluster after being inactive for this time in minutes. If specified, the threshold must be between 10 and 10000 minutes. You can also set this value to 0 to explicitly disable automatic termination. Defaults to 60.  We highly recommend having this setting present for Interactive/BI clusters.
                    type: number
                  awsAttributes:
                    items:
                      properties:
                        availability:
                          description: 'Availability type used for all subsequent nodes past the first_on_demand ones. Valid values are SPOT, SPOT_WITH_FALLBACK and ON_DEMAND. Note: If first_on_demand is zero, this availability type will be used for the entire cluster. Backend default value is SPOT_WITH_FALLBACK and could change in the future'
                          type: string
                        ebsVolumeCount:
                          description: The number of volumes launched for each instance. You can choose up to 10 volumes. This feature is only enabled for supported node types. Legacy node types cannot specify custom EBS volumes. For node types with no instance store, at least one EBS volume needs to be specified; otherwise, cluster creation will fail. These EBS volumes will be mounted at /ebs0, /ebs1, and etc. Instance store volumes will be mounted at /local_disk0, /local_disk1, and etc. If EBS volumes are attached, Databricks will configure Spark to use only the EBS volumes for scratch storage because heterogeneously sized scratch devices can lead to inefficient disk utilization. If no EBS volumes are attached, Databricks will configure Spark to use instance store volumes. If EBS volumes are specified, then the Spark configuration spark.local.dir will be overridden.
                          type: number
                        ebsVolumeIops:
                          type: number
                        ebsVolumeSize:
                          description: The size of each EBS volume (in GiB) launched for each instance. For general purpose SSD, this value must be within the range 100 - 4096. For throughput optimized HDD, this value must be within the range 500 - 4096. Custom EBS volumes cannot be specified for the legacy node types (memory-optimized and compute-optimized).
                          type: number
                        ebsVolumeThroughput:
                          type: number
                        ebsVolumeType:
                          description: The type of EBS volumes that will be launched with this cluster. Valid values are GENERAL_PURPOSE_SSD or THROUGHPUT_OPTIMIZED_HDD. Use this option only if you're not picking Delta Optimized  node types.
                          type: string
                        firstOnDemand:
                          description: The first first_on_demand nodes of the cluster will be placed on on-demand instances. If this value is greater than 0, the cluster driver node will be placed on an on-demand instance. If this value is greater than or equal to the current cluster size, all nodes will be placed on on-demand instances. If this value is less than the current cluster size, first_on_demand nodes will be placed on on-demand instances, and the remainder will be placed on availability instances. This value does not affect cluster size and cannot be mutated over the lifetime of a cluster. If unspecified, the default value is 0.
                          type: number
                        instanceProfileArn:
                          description: Nodes for this cluster will only be placed on AWS instances with this instance profile.
                          type: string
                        spotBidPricePercent:
                          description: The max price for AWS spot instances, as a percentage of the corresponding instance typeâ€™s on-demand price. For example, if this field is set to 50, and the cluster needs a new i3.xlarge spot instance, then the max price is half of the price of on-demand i3.xlarge instances. Similarly, if this field is set to 200, the max price is twice the price of on-demand i3.xlarge instances. If not specified, the default value is 100. When spot instances are requested for this cluster, only spot instances whose max price percentage matches this field will be considered. For safety, we enforce this field to be no more than 10000.
                          type: number
                        zoneId:
                          description: Identifier for the availability zone/datacenter in which the cluster resides. This string will be of a form like us-west-2a. The provided availability zone must be in the same region as the Databricks deployment. For example, us-west-2a is not a valid zone ID if the Databricks deployment resides in the us-east-1 region. Enable automatic availability zone selection ("Auto-AZ"), by setting the value auto. Databricks selects the AZ based on available IPs in the workspace subnets and retries in other availability zones if AWS returns insufficient capacity errors.
                          type: string
                      type: object
                    type: array
                  azureAttributes:
                    items:
                      properties:
                        availability:
                          description: 'Availability type used for all subsequent nodes past the first_on_demand ones. Valid values are SPOT_AZURE, SPOT_WITH_FALLBACK_AZURE, and ON_DEMAND_AZURE. Note: If first_on_demand is zero, this availability type will be used for the entire cluster.'
                          type: string
                        firstOnDemand:
                          description: The first first_on_demand nodes of the cluster will be placed on on-demand instances. If this value is greater than 0, the cluster driver node will be placed on an on-demand instance. If this value is greater than or equal to the current cluster size, all nodes will be placed on on-demand instances. If this value is less than the current cluster size, first_on_demand nodes will be placed on on-demand instances, and the remainder will be placed on availability instances. This value does not affect cluster size and cannot be mutated over the lifetime of a cluster.
                          type: number
                        logAnalyticsInfo:
                          items:
                            properties:
                              logAnalyticsPrimaryKey:
                                type: string
                              logAnalyticsWorkspaceId:
                                description: Canonical unique identifier for the cluster.
                                type: string
                            type: object
                          type: array
                        spotBidMaxPrice:
                          description: The max bid price used for Azure spot instances. You can set this to greater than or equal to the current spot price. You can also set this to -1, which specifies that the instance cannot be evicted on the basis of price. The price for the instance will be the current price for spot instances or the price for a standard instance.
                          type: number
                      type: object
                    type: array
                  clusterId:
                    description: Canonical unique identifier for the cluster.
                    type: string
                  clusterLogConf:
                    items:
                      properties:
                        dbfs:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        s3:
                          items:
                            properties:
                              cannedAcl:
                                description: Set canned access control list, e.g. bucket-owner-full-control. If canned_cal is set, the cluster instance profile must have s3:PutObjectAcl permission on the destination bucket and prefix. The full list of possible canned ACLs can be found here. By default, only the object owner gets full control. If you are using a cross-account role for writing data, you may want to set bucket-owner-full-control to make bucket owners able to read the logs.
                                type: string
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                              enableEncryption:
                                description: Enable server-side encryption, false by default.
                                type: boolean
                              encryptionType:
                                description: The encryption type, it could be sse-s3 or sse-kms. It is used only when encryption is enabled, and the default type is sse-s3.
                                type: string
                              endpoint:
                                description: S3 endpoint, e.g. https://s3-us-west-2.amazonaws.com. Either region or endpoint needs to be set. If both are set, the endpoint is used.
                                type: string
                              kmsKey:
                                description: KMS key used if encryption is enabled and encryption type is set to sse-kms.
                                type: string
                              region:
                                description: S3 region, e.g. us-west-2. Either region or endpoint must be set. If both are set, the endpoint is used.
                                type: string
                            type: object
                          type: array
                        volumes:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  clusterMountInfo:
                    items:
                      properties:
                        localMountDirPath:
                          description: path inside the Spark container.
                          type: string
                        networkFilesystemInfo:
                          description: 'block specifying connection. It consists of:'
                          items:
                            properties:
                              mountOptions:
                                description: string that will be passed as options passed to the mount command.
                                type: string
                              serverAddress:
                                description: host name.
                                type: string
                            type: object
                          type: array
                        remoteMountDirPath:
                          description: string specifying path to mount on the remote service.
                          type: string
                      type: object
                    type: array
                  clusterName:
                    description: Cluster name, which doesn't have to be unique. If not specified at creation, the cluster name will be an empty string.
                    type: string
                  customTags:
                    additionalProperties:
                      type: string
                    description: Additional tags for cluster resources. Databricks will tag all cluster resources (e.g., AWS EC2 instances and EBS volumes) with these tags in addition to default_tags. If a custom cluster tag has the same name as a default cluster tag, the custom tag is prefixed with an x_ when it is propagated.
                    type: object
                    x-kubernetes-map-type: granular
                  dataSecurityMode:
                    description: 'Select the security features of the cluster (see API docs for full list of values). Unity Catalog requires SINGLE_USER or USER_ISOLATION mode. LEGACY_PASSTHROUGH for passthrough cluster and LEGACY_TABLE_ACL for Table ACL cluster. If omitted, default security features are enabled. To disable security features use NONE or legacy mode NO_ISOLATION.  If kind is specified, then the following options are available:'
                    type: string
                  defaultTags:
                    additionalProperties:
                      type: string
                    description: '(map) Tags that are added by Databricks by default, regardless of any custom_tags that may have been added. These include: Vendor: Databricks, Creator: <username_of_creator>, ClusterName: <name_of_cluster>, ClusterId: <id_of_cluster>, Name: , and any workspace and pool tags.'
                    type: object
                    x-kubernetes-map-type: granular
                  dockerImage:
                    items:
                      properties:
                        basicAuth:
                          description: basic_auth.username and basic_auth.password for Docker repository. Docker registry credentials are encrypted when they are stored in Databricks internal storage and when they are passed to a registry upon fetching Docker images at cluster launch. However, other authenticated and authorized API users of this workspace can access the username and password.
                          items:
                            properties:
                              username:
                                type: string
                            type: object
                          type: array
                        url:
                          description: URL for the Docker image
                          type: string
                      type: object
                    type: array
                  driverInstancePoolId:
                    description: similar to instance_pool_id, but for driver node. If omitted, and instance_pool_id is specified, then the driver will be allocated from that pool.
                    type: string
                  driverNodeTypeId:
                    description: The node type of the Spark driver. This field is optional; if unset, API will set the driver node type to the same value as node_type_id defined above.
                    type: string
                  enableElasticDisk:
                    description: If you don't want to allocate a fixed number of EBS volumes at cluster creation time, use autoscaling local storage. With autoscaling local storage, Databricks monitors the amount of free disk space available on your cluster's Spark workers. If a worker begins to run too low on disk, Databricks automatically attaches a new EBS volume to the worker before it runs out of disk space. EBS volumes are attached up to a limit of 5 TB of total disk space per instance (including the instance's local storage). To scale down EBS usage, make sure you have autotermination_minutes and autoscale attributes set. More documentation available at cluster configuration page.
                    type: boolean
                  enableLocalDiskEncryption:
                    description: Some instance types you use to run clusters may have locally attached disks. Databricks may store shuffle data or temporary data on these locally attached disks. To ensure that all data at rest is encrypted for all storage types, including shuffle data stored temporarily on your cluster's local disks, you can enable local disk encryption. When local disk encryption is enabled, Databricks generates an encryption key locally unique to each cluster node and uses it to encrypt all data stored on local disks. The scope of the key is local to each cluster node and is destroyed along with the cluster node itself. During its lifetime, the key resides in memory for encryption and decryption and is stored encrypted on the disk. Your workloads may run more slowly because of the performance impact of reading and writing encrypted data to and from local volumes. This feature is not available for all Azure Databricks subscriptions. Contact your Microsoft or Databricks account representative to request access.
                    type: boolean
                  gcpAttributes:
                    items:
                      properties:
                        availability:
                          description: ', and will be removed soon.'
                          type: string
                        bootDiskSize:
                          description: Boot disk size in GB
                          type: number
                        googleServiceAccount:
                          description: Google Service Account email address that the cluster uses to authenticate with Google Identity. This field is used for authentication with the GCS and BigQuery data sources.
                          type: string
                        localSsdCount:
                          description: Number of local SSD disks (each is 375GB in size) that will be attached to each node of the cluster.
                          type: number
                        usePreemptibleExecutors:
                          description: 'if we should use preemptible executors (GCP documentation). Warning: this field is deprecated in favor of'
                          type: boolean
                        zoneId:
                          description: 'Identifier for the availability zone in which the cluster resides. This can be one of the following:'
                          type: string
                      type: object
                    type: array
                  id:
                    description: Canonical unique identifier for the cluster.
                    type: string
                  idempotencyToken:
                    description: An optional token to guarantee the idempotency of cluster creation requests. If an active cluster with the provided token already exists, the request will not create a new cluster, but it will return the existing running cluster's ID instead. If you specify the idempotency token, upon failure, you can retry until the request succeeds. Databricks platform guarantees to launch exactly one cluster with that idempotency token. This token should have at most 64 characters.
                    type: string
                  initScripts:
                    items:
                      properties:
                        abfss:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        dbfs:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        file:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        gcs:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        s3:
                          items:
                            properties:
                              cannedAcl:
                                description: Set canned access control list, e.g. bucket-owner-full-control. If canned_cal is set, the cluster instance profile must have s3:PutObjectAcl permission on the destination bucket and prefix. The full list of possible canned ACLs can be found here. By default, only the object owner gets full control. If you are using a cross-account role for writing data, you may want to set bucket-owner-full-control to make bucket owners able to read the logs.
                                type: string
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                              enableEncryption:
                                description: Enable server-side encryption, false by default.
                                type: boolean
                              encryptionType:
                                description: The encryption type, it could be sse-s3 or sse-kms. It is used only when encryption is enabled, and the default type is sse-s3.
                                type: string
                              endpoint:
                                description: S3 endpoint, e.g. https://s3-us-west-2.amazonaws.com. Either region or endpoint needs to be set. If both are set, the endpoint is used.
                                type: string
                              kmsKey:
                                description: KMS key used if encryption is enabled and encryption type is set to sse-kms.
                                type: string
                              region:
                                description: S3 region, e.g. us-west-2. Either region or endpoint must be set. If both are set, the endpoint is used.
                                type: string
                            type: object
                          type: array
                        volumes:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                        workspace:
                          items:
                            properties:
                              destination:
                                description: S3 destination, e.g., s3://my-bucket/some-prefix You must configure the cluster with an instance profile, and the instance profile must have write access to the destination. You cannot use AWS keys.
                                type: string
                            type: object
                          type: array
                      type: object
                    type: array
                  instancePoolId:
                    description: required if node_type_id is not given) - To reduce cluster start time, you can attach a cluster to a predefined pool of idle instances. When attached to a pool, a cluster allocates its driver and worker nodes from the pool. If the pool does not have sufficient idle resources to accommodate the cluster's request, it expands by allocating new instances from the instance provider. When an attached cluster changes its state to TERMINATED, the instances it used are returned to the pool and reused by a different cluster.
                    type: string
                  isPinned:
                    description: boolean value specifying if the cluster is pinned (not pinned by default). You must be a Databricks administrator to use this.  The pinned clusters' maximum number is limited to 100, so apply may fail if you have more than that (this number may change over time, so check Databricks documentation for actual number).
                    type: boolean
                  isSingleNode:
                    description: When set to true, Databricks will automatically set single node related custom_tags, spark_conf, and num_workers.
                    type: boolean
                  kind:
                    description: 'The kind of compute described by this compute specification.  Possible values (see API docs for full list): CLASSIC_PREVIEW (if corresponding public preview is enabled).'
                    type: string
                  library:
                    items:
                      properties:
                        cran:
                          items:
                            properties:
                              package:
                                type: string
                              repo:
                                type: string
                            type: object
                          type: array
                        egg:
                          type: string
                        jar:
                          type: string
                        maven:
                          items:
                            properties:
                              coordinates:
                                type: string
                              exclusions:
                                items:
                                  type: string
                                type: array
                              repo:
                                type: string
                            type: object
                          type: array
                        pypi:
                          items:
                            properties:
                              package:
                                type: string
                              repo:
                                type: string
                            type: object
                          type: array
                        requirements:
                          type: string
                        whl:
                          type: string
                      type: object
                    type: array
                  noWait:
                    description: If true, the provider will not wait for the cluster to reach RUNNING state when creating the cluster, allowing cluster creation and library installation to continue asynchronously. Defaults to false (the provider will wait for cluster creation and library installation to succeed).
                    type: boolean
                  nodeTypeId:
                    description: Any supported databricks_node_type id. If instance_pool_id is specified, this field is not needed.
                    type: string
                  numWorkers:
                    description: Number of worker nodes that this cluster should have. A cluster has one Spark driver and num_workers executors for a total of num_workers + 1 Spark nodes.
                    type: number
                  policyId:
                    description: Identifier of Cluster Policy to validate cluster and preset certain defaults. The primary use for cluster policies is to allow users to create policy-scoped clusters via UI rather than sharing configuration for API-created clusters. For example, when you specify policy_id of external metastore policy, you still have to fill in relevant keys for spark_conf.
                    type: string
                  remoteDiskThroughput:
                    type: number
                  runtimeEngine:
                    description: 'The type of runtime engine to use. If not specified, the runtime engine type is inferred based on the spark_version value. Allowed values include: PHOTON, STANDARD.'
                    type: string
                  singleUserName:
                    description: The optional user name of the user (or group name if kind if specified) to assign to an interactive cluster. This field is required when using data_security_mode set to SINGLE_USER or AAD Passthrough for Azure Data Lake Storage (ADLS) with a single-user cluster (i.e., not high-concurrency clusters).
                    type: string
                  sparkConf:
                    additionalProperties:
                      type: string
                    description: Map with key-value pairs to fine-tune Spark clusters, where you can provide custom Spark configuration properties in a cluster configuration.
                    type: object
                    x-kubernetes-map-type: granular
                  sparkEnvVars:
                    additionalProperties:
                      type: string
                    description: Map with environment variable key-value pairs to fine-tune Spark clusters. Key-value pairs of the form (X,Y) are exported (i.e., X='Y') while launching the driver and workers.
                    type: object
                    x-kubernetes-map-type: granular
                  sparkVersion:
                    description: Runtime version of the cluster. Any supported databricks_spark_version id.  We advise using Cluster Policies to restrict the list of versions for simplicity while maintaining enough control.
                    type: string
                  sshPublicKeys:
                    description: SSH public key contents that will be added to each Spark node in this cluster. The corresponding private keys can be used to login with the user name ubuntu on port 2200. You can specify up to 10 keys.
                    items:
                      type: string
                    type: array
                  state:
                    description: (string) State of the cluster.
                    type: string
                  totalInitialRemoteDiskSize:
                    type: number
                  url:
                    description: URL for the Docker image
                    type: string
                  useMlRuntime:
                    description: Whenever ML runtime should be selected or not.  Actual runtime is determined by spark_version (DBR release), this field use_ml_runtime, and whether node_type_id is GPU node or not.
                    type: boolean
                  workloadType:
                    items:
                      properties:
                        clients:
                          items:
                            properties:
                              jobs:
                                description: "boolean flag defining if it's possible to run Databricks Jobs on this cluster. Default: true."
                                type: boolean
                              notebooks:
                                description: "boolean flag defining if it's possible to run notebooks on this cluster. Default: true."
                                type: boolean
                            type: object
                          type: array
                      type: object
                    type: array
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: >-
                        LastTransitionTime is the last time this condition transitioned from one

                        status to another.
                      format: date-time
                      type: string
                    message:
                      description: >-
                        A Message containing details about this condition's last transition from

                        one status to another, if any.
                      type: string
                    observedGeneration:
                      description: >-
                        ObservedGeneration represents the .metadata.generation that the condition was set based upon.

                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date

                        with respect to the current state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: A Reason for this condition's last transition from one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True, False, or Unknown?
                      type: string
                    type:
                      description: >-
                        Type of this condition. At most one of each condition type may apply to

                        a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              observedGeneration:
                description: >-
                  ObservedGeneration is the latest metadata.generation

                  which resulted in either a ready state, or stalled due to error

                  it can not recover from without human intervention.
                format: int64
                type: integer
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
