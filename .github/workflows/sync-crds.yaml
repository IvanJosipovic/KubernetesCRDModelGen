name: sync-crds

on:
  push:
    branches:
      - alpha
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"

jobs:
  sync-crds:
    runs-on: ubuntu-latest
    steps:

      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - uses: azure/setup-helm@v4
        with:
          version: 'latest'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean Models
        run: rm -rf ./src/Models/KubernetesCRDModelGen*

      - name: Sync CRDs
        run: dotnet run --project ./src/KubernetesCRDModelGen.Sync/KubernetesCRDModelGen.Sync.csproj --ModelDir ../Models

      - name: Build Model packages
        shell: pwsh
        run: |
          $projects = Get-ChildItem -Path $PWD\src\Models -Recurse -Filter *.csproj
          foreach($project in $projects){

            dotnet run --project src\KubernetesCRDModelGen.Tool --FolderPath $($project.FullName)
            if (-not $?) {
              throw "CRD Generation Failed"
            }
          }

      - name: Validate Yamls
        working-directory: src/Models
        shell: pwsh
        run: |
          $SubDirs = Get-ChildItem -Directory -Path $(Get-Location)
          $AllDirsHaveYaml = $true

          foreach ($Dir in $SubDirs) {
            $YamlFiles = Get-ChildItem -Path $Dir.FullName -Filter *.yaml -File -ErrorAction SilentlyContinue

            if ($YamlFiles.Count -eq 0) {
              Write-Error "No .yaml file found in directory: $($Dir.FullName)"
              $AllDirsHaveYaml = $false
            }
          }

          if (-not $AllDirsHaveYaml) {
            throw "Some subdirectories do not contain a .yaml file."
          }
          else {
            Write-Host "All subdirectories contain a .yaml file."
          }

      - name: Check Files Changed
        id: checkfiles
        shell: pwsh
        run: |
          git add .
          $createPR = (git diff --cached --numstat | Measure-Object -Line).Lines -gt 1;
          echo "createpr=$createPR" >> $env:GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.checkfiles.outputs.createpr == 'True'
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GHPAT }}
          branch: sync-charts
          commit-message: "feat: Update CRDs"
          title: "feat: Update CRDs"
          body: "Automated CRD Sync"

      - name: Enable Pull Request Automerge
        if: steps.checkfiles.outputs.createpr == 'True'
        run: gh pr merge --merge --auto "${{ steps.cpr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ secrets.GHPAT }}
